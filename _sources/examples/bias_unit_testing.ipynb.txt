{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Base imports\n",
    "import sys\n",
    "sys.path.append('../')\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from holisticai.utils import pandas_to_numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classification Unit Tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from holisticai.bias.metrics import statistical_parity\n",
    "from holisticai.bias.metrics import disparate_impact\n",
    "from holisticai.bias.metrics import four_fifths\n",
    "from holisticai.bias.metrics import cohen_d\n",
    "from holisticai.bias.metrics import correlation_diff\n",
    "from holisticai.bias.metrics import equal_opportunity_diff\n",
    "from holisticai.bias.metrics import false_positive_diff\n",
    "from holisticai.bias.metrics import average_odds_diff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_c = pd.read_csv('../data/small_test_classification.csv')\n",
    "# Format data into numpy\n",
    "group_a, group_b, y_pred_c, y_true_c = pandas_to_numpy(df_c,cols=['group_a','group_b','y_pred','y_true'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4166666666666667"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# all values normal\n",
    "statistical_parity(group_a, group_b, y_pred_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "group_a is not a numpy array or pandas series",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 6\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000009?line=0'>1</a>\u001b[0m \u001b[39m# list instead of array\u001b[39;00m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000009?line=1'>2</a>\u001b[0m statistical_parity(\u001b[39mlist\u001b[39;49m(group_a), group_b, y_pred_c)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:77\u001b[0m, in \u001b[0;36mstatistical_parity\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     39\u001b[0m \u001b[39mStatistical parity.\u001b[39;00m\n\u001b[1;32m     40\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[39m0.4166666666666667\u001b[39;00m\n\u001b[1;32m     75\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     76\u001b[0m \u001b[39m# checks\u001b[39;00m\n\u001b[0;32m---> 77\u001b[0m check_classification_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     78\u001b[0m \u001b[39m# calculate sr_a and sr_b\u001b[39;00m\n\u001b[1;32m     79\u001b[0m sr_a \u001b[39m=\u001b[39m _group_success_rate(group_a, y_pred)  \u001b[39m# success rate group_a\u001b[39;00m\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:130\u001b[0m, in \u001b[0;36mcheck_classification_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    105\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m    106\u001b[0m \u001b[39mCheck classification inputs\u001b[39;00m\n\u001b[1;32m    107\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    126\u001b[0m \u001b[39mTypeError or ValueError or None\u001b[39;00m\n\u001b[1;32m    127\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m    128\u001b[0m \u001b[39mif\u001b[39;00m y_true \u001b[39mis\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[1;32m    129\u001b[0m     \u001b[39m# check numpy\u001b[39;00m\n\u001b[0;32m--> 130\u001b[0m     _check_numpy(group_a, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39mgroup_a\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    131\u001b[0m     _check_numpy(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    132\u001b[0m     _check_numpy(y_pred, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39my_pred\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:27\u001b[0m, in \u001b[0;36m_check_numpy\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr,np\u001b[39m.\u001b[39mndarray):\n\u001b[1;32m     26\u001b[0m     \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr, pd\u001b[39m.\u001b[39mSeries):\n\u001b[0;32m---> 27\u001b[0m         \u001b[39mraise\u001b[39;00m \u001b[39mTypeError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not a numpy array or pandas series\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mTypeError\u001b[0m: group_a is not a numpy array or pandas series"
     ]
    }
   ],
   "source": [
    "# list instead of array\n",
    "statistical_parity(list(group_a), group_b, y_pred_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4166666666666667"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pandas series instead of array\n",
    "statistical_parity(pd.Series(group_a), group_b, y_pred_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(pd.Series(group_a), pd.Series)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/giuliofilippi/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:33: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  success_rate = y[g == 1].sum() / g.sum()  # success rate group_a\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# list instead of array for group\n",
    "statistical_parity(np.array([]), group_b, y_pred_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "y_pred is not a numpy array or pandas series",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 10\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000012?line=0'>1</a>\u001b[0m \u001b[39m# list instead of array for pred\u001b[39;00m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000012?line=1'>2</a>\u001b[0m statistical_parity(group_a, group_b, \u001b[39mlist\u001b[39;49m(y_pred_c))\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:77\u001b[0m, in \u001b[0;36mstatistical_parity\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     39\u001b[0m \u001b[39mStatistical parity.\u001b[39;00m\n\u001b[1;32m     40\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[39m0.4166666666666667\u001b[39;00m\n\u001b[1;32m     75\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     76\u001b[0m \u001b[39m# checks\u001b[39;00m\n\u001b[0;32m---> 77\u001b[0m check_classification_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     78\u001b[0m \u001b[39m# calculate sr_a and sr_b\u001b[39;00m\n\u001b[1;32m     79\u001b[0m sr_a \u001b[39m=\u001b[39m _group_success_rate(group_a, y_pred)  \u001b[39m# success rate group_a\u001b[39;00m\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:132\u001b[0m, in \u001b[0;36mcheck_classification_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    130\u001b[0m _check_numpy(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    131\u001b[0m _check_numpy(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[0;32m--> 132\u001b[0m _check_numpy(y_pred, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39my_pred\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    133\u001b[0m \u001b[39m# check binary\u001b[39;00m\n\u001b[1;32m    134\u001b[0m _check_binary(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:27\u001b[0m, in \u001b[0;36m_check_numpy\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr,np\u001b[39m.\u001b[39mndarray):\n\u001b[1;32m     26\u001b[0m     \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr, pd\u001b[39m.\u001b[39mSeries):\n\u001b[0;32m---> 27\u001b[0m         \u001b[39mraise\u001b[39;00m \u001b[39mTypeError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not a numpy array or pandas series\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mTypeError\u001b[0m: y_pred is not a numpy array or pandas series"
     ]
    }
   ],
   "source": [
    "# list instead of array for pred\n",
    "statistical_parity(group_a, group_b, list(y_pred_c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "boolean index did not match indexed array along dimension 0; dimension is 0 but corresponding boolean dimension is 10",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 11\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000013?line=0'>1</a>\u001b[0m \u001b[39m# empty prediction vector\u001b[39;00m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000013?line=1'>2</a>\u001b[0m statistical_parity(group_a, group_b, np\u001b[39m.\u001b[39;49marray([]))\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:79\u001b[0m, in \u001b[0;36mstatistical_parity\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     77\u001b[0m check_classification_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39m\u001b[39mNone\u001b[39;00m)\n\u001b[1;32m     78\u001b[0m \u001b[39m# calculate sr_a and sr_b\u001b[39;00m\n\u001b[0;32m---> 79\u001b[0m sr_a \u001b[39m=\u001b[39m _group_success_rate(group_a, y_pred)  \u001b[39m# success rate group_a\u001b[39;00m\n\u001b[1;32m     80\u001b[0m sr_b \u001b[39m=\u001b[39m _group_success_rate(group_b, y_pred)  \u001b[39m# success rate group_b\u001b[39;00m\n\u001b[1;32m     82\u001b[0m \u001b[39mreturn\u001b[39;00m sr_a \u001b[39m-\u001b[39m sr_b\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:33\u001b[0m, in \u001b[0;36m_group_success_rate\u001b[0;34m(g, y)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39m_group_success_rate\u001b[39m(g, y):\n\u001b[1;32m     12\u001b[0m     \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \u001b[39m    Group success rate.\u001b[39;00m\n\u001b[1;32m     14\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     30\u001b[0m \n\u001b[1;32m     31\u001b[0m \u001b[39m    \"\"\"\u001b[39;00m\n\u001b[0;32m---> 33\u001b[0m     success_rate \u001b[39m=\u001b[39m y[g \u001b[39m==\u001b[39;49m \u001b[39m1\u001b[39;49m]\u001b[39m.\u001b[39msum() \u001b[39m/\u001b[39m g\u001b[39m.\u001b[39msum()  \u001b[39m# success rate group_a\u001b[39;00m\n\u001b[1;32m     34\u001b[0m     \u001b[39mreturn\u001b[39;00m success_rate\n",
      "\u001b[0;31mIndexError\u001b[0m: boolean index did not match indexed array along dimension 0; dimension is 0 but corresponding boolean dimension is 10"
     ]
    }
   ],
   "source": [
    "# empty prediction vector\n",
    "statistical_parity(group_a, group_b, np.array([]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "group_a is not binary",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 12\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000014?line=0'>1</a>\u001b[0m \u001b[39m# group vector not binary\u001b[39;00m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000014?line=1'>2</a>\u001b[0m statistical_parity(\u001b[39m2\u001b[39;49m\u001b[39m*\u001b[39;49mgroup_a, group_b, y_pred_c)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:77\u001b[0m, in \u001b[0;36mstatistical_parity\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     39\u001b[0m \u001b[39mStatistical parity.\u001b[39;00m\n\u001b[1;32m     40\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[39m0.4166666666666667\u001b[39;00m\n\u001b[1;32m     75\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     76\u001b[0m \u001b[39m# checks\u001b[39;00m\n\u001b[0;32m---> 77\u001b[0m check_classification_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     78\u001b[0m \u001b[39m# calculate sr_a and sr_b\u001b[39;00m\n\u001b[1;32m     79\u001b[0m sr_a \u001b[39m=\u001b[39m _group_success_rate(group_a, y_pred)  \u001b[39m# success rate group_a\u001b[39;00m\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:134\u001b[0m, in \u001b[0;36mcheck_classification_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    132\u001b[0m _check_numpy(y_pred, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39my_pred\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    133\u001b[0m \u001b[39m# check binary\u001b[39;00m\n\u001b[0;32m--> 134\u001b[0m _check_binary(group_a, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39mgroup_a\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    135\u001b[0m _check_binary(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    136\u001b[0m _check_binary(y_pred, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39my_pred\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:50\u001b[0m, in \u001b[0;36m_check_binary\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     31\u001b[0m \u001b[39mCheck binary\u001b[39;00m\n\u001b[1;32m     32\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[39mValueError or None\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m np\u001b[39m.\u001b[39marray_equal(arr, arr\u001b[39m.\u001b[39mastype(\u001b[39mbool\u001b[39m)):\n\u001b[0;32m---> 50\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not binary\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mValueError\u001b[0m: group_a is not binary"
     ]
    }
   ],
   "source": [
    "# group vector not binary\n",
    "statistical_parity(2*group_a, group_b, y_pred_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "y_pred is not binary",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 13\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000015?line=0'>1</a>\u001b[0m \u001b[39m# ypred not binary\u001b[39;00m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000015?line=1'>2</a>\u001b[0m statistical_parity(group_a, group_b, \u001b[39m2\u001b[39;49m\u001b[39m*\u001b[39;49my_pred_c)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:77\u001b[0m, in \u001b[0;36mstatistical_parity\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     39\u001b[0m \u001b[39mStatistical parity.\u001b[39;00m\n\u001b[1;32m     40\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[39m0.4166666666666667\u001b[39;00m\n\u001b[1;32m     75\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     76\u001b[0m \u001b[39m# checks\u001b[39;00m\n\u001b[0;32m---> 77\u001b[0m check_classification_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     78\u001b[0m \u001b[39m# calculate sr_a and sr_b\u001b[39;00m\n\u001b[1;32m     79\u001b[0m sr_a \u001b[39m=\u001b[39m _group_success_rate(group_a, y_pred)  \u001b[39m# success rate group_a\u001b[39;00m\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:136\u001b[0m, in \u001b[0;36mcheck_classification_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    134\u001b[0m     _check_binary(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    135\u001b[0m     _check_binary(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[0;32m--> 136\u001b[0m     _check_binary(y_pred, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39my_pred\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    138\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[1;32m    139\u001b[0m     \u001b[39m# check numpy\u001b[39;00m\n\u001b[1;32m    140\u001b[0m     _check_numpy(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:50\u001b[0m, in \u001b[0;36m_check_binary\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     31\u001b[0m \u001b[39mCheck binary\u001b[39;00m\n\u001b[1;32m     32\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[39mValueError or None\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m np\u001b[39m.\u001b[39marray_equal(arr, arr\u001b[39m.\u001b[39mastype(\u001b[39mbool\u001b[39m)):\n\u001b[0;32m---> 50\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not binary\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mValueError\u001b[0m: y_pred is not binary"
     ]
    }
   ],
   "source": [
    "# ypred not binary\n",
    "statistical_parity(group_a, group_b, 2*y_pred_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# twice same group\n",
    "statistical_parity(group_a, group_a, y_pred_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "boolean index did not match indexed array along dimension 0; dimension is 10 but corresponding boolean dimension is 50",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 15\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000017?line=0'>1</a>\u001b[0m \u001b[39m# different lenght arrays for groups\u001b[39;00m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000017?line=1'>2</a>\u001b[0m statistical_parity(group_a, np\u001b[39m.\u001b[39;49marray(\u001b[39mlist\u001b[39;49m(group_b)\u001b[39m*\u001b[39;49m\u001b[39m5\u001b[39;49m), y_pred_c)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:80\u001b[0m, in \u001b[0;36mstatistical_parity\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     78\u001b[0m \u001b[39m# calculate sr_a and sr_b\u001b[39;00m\n\u001b[1;32m     79\u001b[0m sr_a \u001b[39m=\u001b[39m _group_success_rate(group_a, y_pred)  \u001b[39m# success rate group_a\u001b[39;00m\n\u001b[0;32m---> 80\u001b[0m sr_b \u001b[39m=\u001b[39m _group_success_rate(group_b, y_pred)  \u001b[39m# success rate group_b\u001b[39;00m\n\u001b[1;32m     82\u001b[0m \u001b[39mreturn\u001b[39;00m sr_a \u001b[39m-\u001b[39m sr_b\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:33\u001b[0m, in \u001b[0;36m_group_success_rate\u001b[0;34m(g, y)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39m_group_success_rate\u001b[39m(g, y):\n\u001b[1;32m     12\u001b[0m     \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \u001b[39m    Group success rate.\u001b[39;00m\n\u001b[1;32m     14\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     30\u001b[0m \n\u001b[1;32m     31\u001b[0m \u001b[39m    \"\"\"\u001b[39;00m\n\u001b[0;32m---> 33\u001b[0m     success_rate \u001b[39m=\u001b[39m y[g \u001b[39m==\u001b[39;49m \u001b[39m1\u001b[39;49m]\u001b[39m.\u001b[39msum() \u001b[39m/\u001b[39m g\u001b[39m.\u001b[39msum()  \u001b[39m# success rate group_a\u001b[39;00m\n\u001b[1;32m     34\u001b[0m     \u001b[39mreturn\u001b[39;00m success_rate\n",
      "\u001b[0;31mIndexError\u001b[0m: boolean index did not match indexed array along dimension 0; dimension is 10 but corresponding boolean dimension is 50"
     ]
    }
   ],
   "source": [
    "# different lenght arrays for groups\n",
    "statistical_parity(group_a, np.array(list(group_b)*5), y_pred_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "y_pred is not binary",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 16\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000018?line=0'>1</a>\u001b[0m y_pred_reg \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mlinspace(\u001b[39m0\u001b[39m,\u001b[39m3\u001b[39m,\u001b[39m10\u001b[39m)\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000018?line=1'>2</a>\u001b[0m \u001b[39m# prediction regression instead of binary\u001b[39;00m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000018?line=2'>3</a>\u001b[0m statistical_parity(group_a, group_b, y_pred_reg)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:77\u001b[0m, in \u001b[0;36mstatistical_parity\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     39\u001b[0m \u001b[39mStatistical parity.\u001b[39;00m\n\u001b[1;32m     40\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[39m0.4166666666666667\u001b[39;00m\n\u001b[1;32m     75\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     76\u001b[0m \u001b[39m# checks\u001b[39;00m\n\u001b[0;32m---> 77\u001b[0m check_classification_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     78\u001b[0m \u001b[39m# calculate sr_a and sr_b\u001b[39;00m\n\u001b[1;32m     79\u001b[0m sr_a \u001b[39m=\u001b[39m _group_success_rate(group_a, y_pred)  \u001b[39m# success rate group_a\u001b[39;00m\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:136\u001b[0m, in \u001b[0;36mcheck_classification_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    134\u001b[0m     _check_binary(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    135\u001b[0m     _check_binary(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[0;32m--> 136\u001b[0m     _check_binary(y_pred, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39my_pred\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    138\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[1;32m    139\u001b[0m     \u001b[39m# check numpy\u001b[39;00m\n\u001b[1;32m    140\u001b[0m     _check_numpy(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:50\u001b[0m, in \u001b[0;36m_check_binary\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     31\u001b[0m \u001b[39mCheck binary\u001b[39;00m\n\u001b[1;32m     32\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[39mValueError or None\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m np\u001b[39m.\u001b[39marray_equal(arr, arr\u001b[39m.\u001b[39mastype(\u001b[39mbool\u001b[39m)):\n\u001b[0;32m---> 50\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not binary\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mValueError\u001b[0m: y_pred is not binary"
     ]
    }
   ],
   "source": [
    "y_pred_reg = np.linspace(0,3,10)\n",
    "# prediction regression instead of binary\n",
    "statistical_parity(group_a, group_b, y_pred_reg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "y_pred is not binary",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 17\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000019?line=0'>1</a>\u001b[0m \u001b[39m# all 0 for one group\u001b[39;00m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000019?line=1'>2</a>\u001b[0m statistical_parity(np\u001b[39m.\u001b[39;49marray([\u001b[39m0\u001b[39;49m]\u001b[39m*\u001b[39;49m\u001b[39m10\u001b[39;49m), group_b, y_pred_reg)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_classification.py:77\u001b[0m, in \u001b[0;36mstatistical_parity\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     39\u001b[0m \u001b[39mStatistical parity.\u001b[39;00m\n\u001b[1;32m     40\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[39m0.4166666666666667\u001b[39;00m\n\u001b[1;32m     75\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     76\u001b[0m \u001b[39m# checks\u001b[39;00m\n\u001b[0;32m---> 77\u001b[0m check_classification_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     78\u001b[0m \u001b[39m# calculate sr_a and sr_b\u001b[39;00m\n\u001b[1;32m     79\u001b[0m sr_a \u001b[39m=\u001b[39m _group_success_rate(group_a, y_pred)  \u001b[39m# success rate group_a\u001b[39;00m\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:136\u001b[0m, in \u001b[0;36mcheck_classification_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    134\u001b[0m     _check_binary(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    135\u001b[0m     _check_binary(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[0;32m--> 136\u001b[0m     _check_binary(y_pred, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39my_pred\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    138\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[1;32m    139\u001b[0m     \u001b[39m# check numpy\u001b[39;00m\n\u001b[1;32m    140\u001b[0m     _check_numpy(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:50\u001b[0m, in \u001b[0;36m_check_binary\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     31\u001b[0m \u001b[39mCheck binary\u001b[39;00m\n\u001b[1;32m     32\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[39mValueError or None\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m np\u001b[39m.\u001b[39marray_equal(arr, arr\u001b[39m.\u001b[39mastype(\u001b[39mbool\u001b[39m)):\n\u001b[0;32m---> 50\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not binary\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mValueError\u001b[0m: y_pred is not binary"
     ]
    }
   ],
   "source": [
    "# all 0 for one group\n",
    "statistical_parity(np.array([0]*10), group_b, y_pred_reg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from holisticai.bias.metrics import disparate_impactQ\n",
    "from holisticai.bias.metrics import disparate_impactQ90\n",
    "from holisticai.bias.metrics import disparate_impactQ80\n",
    "from holisticai.bias.metrics import disparate_impactQ50\n",
    "from holisticai.bias.metrics import no_disparate_impact_level\n",
    "from holisticai.bias.metrics import avg_score_diff\n",
    "from holisticai.bias.metrics import avg_score_diffQ80\n",
    "from holisticai.bias.metrics import zscore_diff\n",
    "from holisticai.bias.metrics import zscore_diffQ80\n",
    "from holisticai.bias.metrics import max_statistical_parity\n",
    "from holisticai.bias.metrics import statistical_parity_auc\n",
    "from holisticai.bias.metrics import weighed_statistical_parity_auc\n",
    "from holisticai.bias.metrics import correlation_diffQ\n",
    "from holisticai.bias.metrics import correlation_diffQ80\n",
    "from holisticai.bias.metrics import rmse_ratio\n",
    "from holisticai.bias.metrics import rmse_ratioQ80\n",
    "from holisticai.bias.metrics import mae_ratio\n",
    "from holisticai.bias.metrics import mae_ratioQ80"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_r = pd.read_csv('../data/small_test_regression.csv')\n",
    "# Format data into numpy\n",
    "group_a, group_b, y_pred_r, y_true_r = pandas_to_numpy(df_r,cols=['group_a','group_b','y_pred','y_true'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.2"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "disparate_impactQ(group_a, group_b, y_pred_r, q=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "group_a is not a numpy array or pandas series",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 22\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000024?line=0'>1</a>\u001b[0m disparate_impactQ(\u001b[39mlist\u001b[39;49m(group_a), group_b, y_pred_r, q\u001b[39m=\u001b[39;49m\u001b[39m0.2\u001b[39;49m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_regression.py:51\u001b[0m, in \u001b[0;36mdisparate_impactQ\u001b[0;34m(group_a, group_b, y_pred, q)\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[39mDisparate Impact quantile (Regression version).\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[39m1.5\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     50\u001b[0m \u001b[39m# input checks\u001b[39;00m\n\u001b[0;32m---> 51\u001b[0m check_regression_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     52\u001b[0m \u001b[39m# Get quantile cutoff val\u001b[39;00m\n\u001b[1;32m     53\u001b[0m q_val \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mquantile(y_pred, q)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:177\u001b[0m, in \u001b[0;36mcheck_regression_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    152\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m    153\u001b[0m \u001b[39mCheck regression inputs\u001b[39;00m\n\u001b[1;32m    154\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    173\u001b[0m \u001b[39mTypeError or ValueError or None\u001b[39;00m\n\u001b[1;32m    174\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m    175\u001b[0m \u001b[39mif\u001b[39;00m y_true \u001b[39mis\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[1;32m    176\u001b[0m     \u001b[39m# check numpy\u001b[39;00m\n\u001b[0;32m--> 177\u001b[0m     _check_numpy(group_a, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39mgroup_a\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    178\u001b[0m     _check_numpy(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    179\u001b[0m     _check_numpy(y_pred, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39my_pred\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:27\u001b[0m, in \u001b[0;36m_check_numpy\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr,np\u001b[39m.\u001b[39mndarray):\n\u001b[1;32m     26\u001b[0m     \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr, pd\u001b[39m.\u001b[39mSeries):\n\u001b[0;32m---> 27\u001b[0m         \u001b[39mraise\u001b[39;00m \u001b[39mTypeError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not a numpy array or pandas series\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mTypeError\u001b[0m: group_a is not a numpy array or pandas series"
     ]
    }
   ],
   "source": [
    "disparate_impactQ(list(group_a), group_b, y_pred_r, q=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "y_pred is not a numpy array or pandas series",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 23\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000025?line=0'>1</a>\u001b[0m disparate_impactQ(group_a, group_b, \u001b[39mlist\u001b[39;49m(y_pred_r), q\u001b[39m=\u001b[39;49m\u001b[39m0.2\u001b[39;49m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_regression.py:51\u001b[0m, in \u001b[0;36mdisparate_impactQ\u001b[0;34m(group_a, group_b, y_pred, q)\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[39mDisparate Impact quantile (Regression version).\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[39m1.5\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     50\u001b[0m \u001b[39m# input checks\u001b[39;00m\n\u001b[0;32m---> 51\u001b[0m check_regression_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     52\u001b[0m \u001b[39m# Get quantile cutoff val\u001b[39;00m\n\u001b[1;32m     53\u001b[0m q_val \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mquantile(y_pred, q)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:179\u001b[0m, in \u001b[0;36mcheck_regression_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    177\u001b[0m _check_numpy(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    178\u001b[0m _check_numpy(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[0;32m--> 179\u001b[0m _check_numpy(y_pred, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39my_pred\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    180\u001b[0m \u001b[39m# check binary\u001b[39;00m\n\u001b[1;32m    181\u001b[0m _check_binary(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:27\u001b[0m, in \u001b[0;36m_check_numpy\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr,np\u001b[39m.\u001b[39mndarray):\n\u001b[1;32m     26\u001b[0m     \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr, pd\u001b[39m.\u001b[39mSeries):\n\u001b[0;32m---> 27\u001b[0m         \u001b[39mraise\u001b[39;00m \u001b[39mTypeError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not a numpy array or pandas series\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mTypeError\u001b[0m: y_pred is not a numpy array or pandas series"
     ]
    }
   ],
   "source": [
    "disparate_impactQ(group_a, group_b, list(y_pred_r), q=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "group_a is not binary",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 24\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000026?line=0'>1</a>\u001b[0m disparate_impactQ(\u001b[39m2\u001b[39;49m\u001b[39m*\u001b[39;49mgroup_a, group_b, y_pred_r, q\u001b[39m=\u001b[39;49m\u001b[39m0.2\u001b[39;49m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_regression.py:51\u001b[0m, in \u001b[0;36mdisparate_impactQ\u001b[0;34m(group_a, group_b, y_pred, q)\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[39mDisparate Impact quantile (Regression version).\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[39m1.5\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     50\u001b[0m \u001b[39m# input checks\u001b[39;00m\n\u001b[0;32m---> 51\u001b[0m check_regression_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     52\u001b[0m \u001b[39m# Get quantile cutoff val\u001b[39;00m\n\u001b[1;32m     53\u001b[0m q_val \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mquantile(y_pred, q)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:181\u001b[0m, in \u001b[0;36mcheck_regression_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    179\u001b[0m     _check_numpy(y_pred, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39my_pred\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    180\u001b[0m     \u001b[39m# check binary\u001b[39;00m\n\u001b[0;32m--> 181\u001b[0m     _check_binary(group_a, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39mgroup_a\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    182\u001b[0m     _check_binary(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    184\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[1;32m    185\u001b[0m     \u001b[39m# check numpy\u001b[39;00m\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:50\u001b[0m, in \u001b[0;36m_check_binary\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     31\u001b[0m \u001b[39mCheck binary\u001b[39;00m\n\u001b[1;32m     32\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[39mValueError or None\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m np\u001b[39m.\u001b[39marray_equal(arr, arr\u001b[39m.\u001b[39mastype(\u001b[39mbool\u001b[39m)):\n\u001b[0;32m---> 50\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not binary\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mValueError\u001b[0m: group_a is not binary"
     ]
    }
   ],
   "source": [
    "disparate_impactQ(2*group_a, group_b, y_pred_r, q=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "group_b is not binary",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 25\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000027?line=0'>1</a>\u001b[0m disparate_impactQ(group_a, \u001b[39m4\u001b[39;49m\u001b[39m*\u001b[39;49mgroup_b, y_pred_r, q\u001b[39m=\u001b[39;49m\u001b[39m0.2\u001b[39;49m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_regression.py:51\u001b[0m, in \u001b[0;36mdisparate_impactQ\u001b[0;34m(group_a, group_b, y_pred, q)\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[39mDisparate Impact quantile (Regression version).\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[39m1.5\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     50\u001b[0m \u001b[39m# input checks\u001b[39;00m\n\u001b[0;32m---> 51\u001b[0m check_regression_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     52\u001b[0m \u001b[39m# Get quantile cutoff val\u001b[39;00m\n\u001b[1;32m     53\u001b[0m q_val \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mquantile(y_pred, q)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:182\u001b[0m, in \u001b[0;36mcheck_regression_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    180\u001b[0m     \u001b[39m# check binary\u001b[39;00m\n\u001b[1;32m    181\u001b[0m     _check_binary(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[0;32m--> 182\u001b[0m     _check_binary(group_b, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39mgroup_b\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    184\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[1;32m    185\u001b[0m     \u001b[39m# check numpy\u001b[39;00m\n\u001b[1;32m    186\u001b[0m     _check_numpy(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:50\u001b[0m, in \u001b[0;36m_check_binary\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     31\u001b[0m \u001b[39mCheck binary\u001b[39;00m\n\u001b[1;32m     32\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[39mValueError or None\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m np\u001b[39m.\u001b[39marray_equal(arr, arr\u001b[39m.\u001b[39mastype(\u001b[39mbool\u001b[39m)):\n\u001b[0;32m---> 50\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not binary\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mValueError\u001b[0m: group_b is not binary"
     ]
    }
   ],
   "source": [
    "disparate_impactQ(group_a, 4*group_b, y_pred_r, q=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "operands could not be broadcast together with shapes (20,) (10,) ",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 26\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000028?line=0'>1</a>\u001b[0m disparate_impactQ(group_a, np\u001b[39m.\u001b[39;49marray(\u001b[39mlist\u001b[39;49m(group_b)\u001b[39m*\u001b[39;49m\u001b[39m2\u001b[39;49m), y_pred_r, q\u001b[39m=\u001b[39;49m\u001b[39m0.2\u001b[39;49m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_regression.py:57\u001b[0m, in \u001b[0;36mdisparate_impactQ\u001b[0;34m(group_a, group_b, y_pred, q)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[39m# Disparate Impact (a.k.a. Adverse Impact Ratio)\u001b[39;00m\n\u001b[1;32m     56\u001b[0m sr_a \u001b[39m=\u001b[39m (group_a \u001b[39m*\u001b[39m (y_pred \u001b[39m>\u001b[39m\u001b[39m=\u001b[39m q_val))\u001b[39m.\u001b[39msum() \u001b[39m/\u001b[39m group_a\u001b[39m.\u001b[39msum()  \u001b[39m# success rate group_a\u001b[39;00m\n\u001b[0;32m---> 57\u001b[0m sr_b \u001b[39m=\u001b[39m (group_b \u001b[39m*\u001b[39;49m (y_pred \u001b[39m>\u001b[39;49m\u001b[39m=\u001b[39;49m q_val))\u001b[39m.\u001b[39msum() \u001b[39m/\u001b[39m group_b\u001b[39m.\u001b[39msum()  \u001b[39m# success rate group_b\u001b[39;00m\n\u001b[1;32m     59\u001b[0m \u001b[39mreturn\u001b[39;00m sr_a \u001b[39m/\u001b[39m sr_b\n",
      "\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (20,) (10,) "
     ]
    }
   ],
   "source": [
    "disparate_impactQ(group_a, np.array(list(group_b)*2), y_pred_r, q=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "y_pred is not a numpy array or pandas series",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 27\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000029?line=0'>1</a>\u001b[0m disparate_impactQ(group_a, group_a, \u001b[39mlist\u001b[39;49m(y_pred_r), q\u001b[39m=\u001b[39;49m\u001b[39m0.2\u001b[39;49m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_regression.py:51\u001b[0m, in \u001b[0;36mdisparate_impactQ\u001b[0;34m(group_a, group_b, y_pred, q)\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[39mDisparate Impact quantile (Regression version).\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[39m1.5\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     50\u001b[0m \u001b[39m# input checks\u001b[39;00m\n\u001b[0;32m---> 51\u001b[0m check_regression_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39;49m\u001b[39mNone\u001b[39;49;00m)\n\u001b[1;32m     52\u001b[0m \u001b[39m# Get quantile cutoff val\u001b[39;00m\n\u001b[1;32m     53\u001b[0m q_val \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mquantile(y_pred, q)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:179\u001b[0m, in \u001b[0;36mcheck_regression_inputs\u001b[0;34m(group_a, group_b, y_pred, y_true)\u001b[0m\n\u001b[1;32m    177\u001b[0m _check_numpy(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m    178\u001b[0m _check_numpy(group_b, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_b\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[0;32m--> 179\u001b[0m _check_numpy(y_pred, name\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39my_pred\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    180\u001b[0m \u001b[39m# check binary\u001b[39;00m\n\u001b[1;32m    181\u001b[0m _check_binary(group_a, name\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mgroup_a\u001b[39m\u001b[39m'\u001b[39m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/utils/_validation.py:27\u001b[0m, in \u001b[0;36m_check_numpy\u001b[0;34m(arr, name)\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr,np\u001b[39m.\u001b[39mndarray):\n\u001b[1;32m     26\u001b[0m     \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(arr, pd\u001b[39m.\u001b[39mSeries):\n\u001b[0;32m---> 27\u001b[0m         \u001b[39mraise\u001b[39;00m \u001b[39mTypeError\u001b[39;00m(name \u001b[39m+\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m is not a numpy array or pandas series\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mTypeError\u001b[0m: y_pred is not a numpy array or pandas series"
     ]
    }
   ],
   "source": [
    "disparate_impactQ(group_a, group_a, list(y_pred_r), q=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "cannot do a non-empty take from an empty axes.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 28\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000030?line=0'>1</a>\u001b[0m disparate_impactQ(group_a, group_b, np\u001b[39m.\u001b[39;49marray([]), q\u001b[39m=\u001b[39;49m\u001b[39m0.2\u001b[39;49m)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_regression.py:53\u001b[0m, in \u001b[0;36mdisparate_impactQ\u001b[0;34m(group_a, group_b, y_pred, q)\u001b[0m\n\u001b[1;32m     51\u001b[0m check_regression_inputs(group_a, group_b, y_pred, y_true\u001b[39m=\u001b[39m\u001b[39mNone\u001b[39;00m)\n\u001b[1;32m     52\u001b[0m \u001b[39m# Get quantile cutoff val\u001b[39;00m\n\u001b[0;32m---> 53\u001b[0m q_val \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39;49mquantile(y_pred, q)\n\u001b[1;32m     55\u001b[0m \u001b[39m# Disparate Impact (a.k.a. Adverse Impact Ratio)\u001b[39;00m\n\u001b[1;32m     56\u001b[0m sr_a \u001b[39m=\u001b[39m (group_a \u001b[39m*\u001b[39m (y_pred \u001b[39m>\u001b[39m\u001b[39m=\u001b[39m q_val))\u001b[39m.\u001b[39msum() \u001b[39m/\u001b[39m group_a\u001b[39m.\u001b[39msum()  \u001b[39m# success rate group_a\u001b[39;00m\n",
      "File \u001b[0;32m<__array_function__ internals>:180\u001b[0m, in \u001b[0;36mquantile\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
      "File \u001b[0;32m~/opt/anaconda3/envs/torch-nightly/lib/python3.8/site-packages/numpy/lib/function_base.py:4412\u001b[0m, in \u001b[0;36mquantile\u001b[0;34m(a, q, axis, out, overwrite_input, method, keepdims, interpolation)\u001b[0m\n\u001b[1;32m   4410\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m _quantile_is_valid(q):\n\u001b[1;32m   4411\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(\u001b[39m\"\u001b[39m\u001b[39mQuantiles must be in the range [0, 1]\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m-> 4412\u001b[0m \u001b[39mreturn\u001b[39;00m _quantile_unchecked(\n\u001b[1;32m   4413\u001b[0m     a, q, axis, out, overwrite_input, method, keepdims)\n",
      "File \u001b[0;32m~/opt/anaconda3/envs/torch-nightly/lib/python3.8/site-packages/numpy/lib/function_base.py:4424\u001b[0m, in \u001b[0;36m_quantile_unchecked\u001b[0;34m(a, q, axis, out, overwrite_input, method, keepdims)\u001b[0m\n\u001b[1;32m   4416\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39m_quantile_unchecked\u001b[39m(a,\n\u001b[1;32m   4417\u001b[0m                         q,\n\u001b[1;32m   4418\u001b[0m                         axis\u001b[39m=\u001b[39m\u001b[39mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4421\u001b[0m                         method\u001b[39m=\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mlinear\u001b[39m\u001b[39m\"\u001b[39m,\n\u001b[1;32m   4422\u001b[0m                         keepdims\u001b[39m=\u001b[39m\u001b[39mFalse\u001b[39;00m):\n\u001b[1;32m   4423\u001b[0m     \u001b[39m\"\"\"Assumes that q is in [0, 1], and is an ndarray\"\"\"\u001b[39;00m\n\u001b[0;32m-> 4424\u001b[0m     r, k \u001b[39m=\u001b[39m _ureduce(a,\n\u001b[1;32m   4425\u001b[0m                     func\u001b[39m=\u001b[39;49m_quantile_ureduce_func,\n\u001b[1;32m   4426\u001b[0m                     q\u001b[39m=\u001b[39;49mq,\n\u001b[1;32m   4427\u001b[0m                     axis\u001b[39m=\u001b[39;49maxis,\n\u001b[1;32m   4428\u001b[0m                     out\u001b[39m=\u001b[39;49mout,\n\u001b[1;32m   4429\u001b[0m                     overwrite_input\u001b[39m=\u001b[39;49moverwrite_input,\n\u001b[1;32m   4430\u001b[0m                     method\u001b[39m=\u001b[39;49mmethod)\n\u001b[1;32m   4431\u001b[0m     \u001b[39mif\u001b[39;00m keepdims:\n\u001b[1;32m   4432\u001b[0m         \u001b[39mreturn\u001b[39;00m r\u001b[39m.\u001b[39mreshape(q\u001b[39m.\u001b[39mshape \u001b[39m+\u001b[39m k)\n",
      "File \u001b[0;32m~/opt/anaconda3/envs/torch-nightly/lib/python3.8/site-packages/numpy/lib/function_base.py:3725\u001b[0m, in \u001b[0;36m_ureduce\u001b[0;34m(a, func, **kwargs)\u001b[0m\n\u001b[1;32m   3722\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[1;32m   3723\u001b[0m     keepdim \u001b[39m=\u001b[39m (\u001b[39m1\u001b[39m,) \u001b[39m*\u001b[39m a\u001b[39m.\u001b[39mndim\n\u001b[0;32m-> 3725\u001b[0m r \u001b[39m=\u001b[39m func(a, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[1;32m   3726\u001b[0m \u001b[39mreturn\u001b[39;00m r, keepdim\n",
      "File \u001b[0;32m~/opt/anaconda3/envs/torch-nightly/lib/python3.8/site-packages/numpy/lib/function_base.py:4593\u001b[0m, in \u001b[0;36m_quantile_ureduce_func\u001b[0;34m(a, q, axis, out, overwrite_input, method)\u001b[0m\n\u001b[1;32m   4591\u001b[0m     \u001b[39melse\u001b[39;00m:\n\u001b[1;32m   4592\u001b[0m         arr \u001b[39m=\u001b[39m a\u001b[39m.\u001b[39mcopy()\n\u001b[0;32m-> 4593\u001b[0m result \u001b[39m=\u001b[39m _quantile(arr,\n\u001b[1;32m   4594\u001b[0m                    quantiles\u001b[39m=\u001b[39;49mq,\n\u001b[1;32m   4595\u001b[0m                    axis\u001b[39m=\u001b[39;49maxis,\n\u001b[1;32m   4596\u001b[0m                    method\u001b[39m=\u001b[39;49mmethod,\n\u001b[1;32m   4597\u001b[0m                    out\u001b[39m=\u001b[39;49mout)\n\u001b[1;32m   4598\u001b[0m \u001b[39mreturn\u001b[39;00m result\n",
      "File \u001b[0;32m~/opt/anaconda3/envs/torch-nightly/lib/python3.8/site-packages/numpy/lib/function_base.py:4699\u001b[0m, in \u001b[0;36m_quantile\u001b[0;34m(arr, quantiles, axis, method, out)\u001b[0m\n\u001b[1;32m   4691\u001b[0m arr\u001b[39m.\u001b[39mpartition(\n\u001b[1;32m   4692\u001b[0m     np\u001b[39m.\u001b[39munique(np\u001b[39m.\u001b[39mconcatenate(([\u001b[39m0\u001b[39m, \u001b[39m-\u001b[39m\u001b[39m1\u001b[39m],\n\u001b[1;32m   4693\u001b[0m                               previous_indexes\u001b[39m.\u001b[39mravel(),\n\u001b[1;32m   4694\u001b[0m                               next_indexes\u001b[39m.\u001b[39mravel(),\n\u001b[1;32m   4695\u001b[0m                               ))),\n\u001b[1;32m   4696\u001b[0m     axis\u001b[39m=\u001b[39mDATA_AXIS)\n\u001b[1;32m   4697\u001b[0m \u001b[39mif\u001b[39;00m np\u001b[39m.\u001b[39missubdtype(arr\u001b[39m.\u001b[39mdtype, np\u001b[39m.\u001b[39minexact):\n\u001b[1;32m   4698\u001b[0m     slices_having_nans \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39misnan(\n\u001b[0;32m-> 4699\u001b[0m         take(arr, indices\u001b[39m=\u001b[39;49m\u001b[39m-\u001b[39;49m\u001b[39m1\u001b[39;49m, axis\u001b[39m=\u001b[39;49mDATA_AXIS)\n\u001b[1;32m   4700\u001b[0m     )\n\u001b[1;32m   4701\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[1;32m   4702\u001b[0m     slices_having_nans \u001b[39m=\u001b[39m \u001b[39mNone\u001b[39;00m\n",
      "File \u001b[0;32m<__array_function__ internals>:180\u001b[0m, in \u001b[0;36mtake\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
      "File \u001b[0;32m~/opt/anaconda3/envs/torch-nightly/lib/python3.8/site-packages/numpy/core/fromnumeric.py:190\u001b[0m, in \u001b[0;36mtake\u001b[0;34m(a, indices, axis, out, mode)\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[39m@array_function_dispatch\u001b[39m(_take_dispatcher)\n\u001b[1;32m     94\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mtake\u001b[39m(a, indices, axis\u001b[39m=\u001b[39m\u001b[39mNone\u001b[39;00m, out\u001b[39m=\u001b[39m\u001b[39mNone\u001b[39;00m, mode\u001b[39m=\u001b[39m\u001b[39m'\u001b[39m\u001b[39mraise\u001b[39m\u001b[39m'\u001b[39m):\n\u001b[1;32m     95\u001b[0m     \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     96\u001b[0m \u001b[39m    Take elements from an array along an axis.\u001b[39;00m\n\u001b[1;32m     97\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    188\u001b[0m \u001b[39m           [5, 7]])\u001b[39;00m\n\u001b[1;32m    189\u001b[0m \u001b[39m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 190\u001b[0m     \u001b[39mreturn\u001b[39;00m _wrapfunc(a, \u001b[39m'\u001b[39;49m\u001b[39mtake\u001b[39;49m\u001b[39m'\u001b[39;49m, indices, axis\u001b[39m=\u001b[39;49maxis, out\u001b[39m=\u001b[39;49mout, mode\u001b[39m=\u001b[39;49mmode)\n",
      "File \u001b[0;32m~/opt/anaconda3/envs/torch-nightly/lib/python3.8/site-packages/numpy/core/fromnumeric.py:57\u001b[0m, in \u001b[0;36m_wrapfunc\u001b[0;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[1;32m     54\u001b[0m     \u001b[39mreturn\u001b[39;00m _wrapit(obj, method, \u001b[39m*\u001b[39margs, \u001b[39m*\u001b[39m\u001b[39m*\u001b[39mkwds)\n\u001b[1;32m     56\u001b[0m \u001b[39mtry\u001b[39;00m:\n\u001b[0;32m---> 57\u001b[0m     \u001b[39mreturn\u001b[39;00m bound(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwds)\n\u001b[1;32m     58\u001b[0m \u001b[39mexcept\u001b[39;00m \u001b[39mTypeError\u001b[39;00m:\n\u001b[1;32m     59\u001b[0m     \u001b[39m# A TypeError occurs if the object does have such a method in its\u001b[39;00m\n\u001b[1;32m     60\u001b[0m     \u001b[39m# class, but its signature is not identical to that of NumPy's. This\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[39m# Call _wrapit from within the except clause to ensure a potential\u001b[39;00m\n\u001b[1;32m     65\u001b[0m     \u001b[39m# exception has a traceback chain.\u001b[39;00m\n\u001b[1;32m     66\u001b[0m     \u001b[39mreturn\u001b[39;00m _wrapit(obj, method, \u001b[39m*\u001b[39margs, \u001b[39m*\u001b[39m\u001b[39m*\u001b[39mkwds)\n",
      "\u001b[0;31mIndexError\u001b[0m: cannot do a non-empty take from an empty axes."
     ]
    }
   ],
   "source": [
    "disparate_impactQ(group_a, group_b, np.array([]), q=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from holisticai.bias.metrics import cluster_balance\n",
    "from holisticai.bias.metrics import min_cluster_ratio\n",
    "from holisticai.bias.metrics import avg_cluster_ratio\n",
    "from holisticai.bias.metrics import cluster_dist_l1\n",
    "from holisticai.bias.metrics import cluster_dist_kl\n",
    "from holisticai.bias.metrics import cluster_dist_entropy\n",
    "from holisticai.bias.metrics import social_fairness_ratio\n",
    "from holisticai.bias.metrics import mi_diff\n",
    "from holisticai.bias.metrics import silhouette_diff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Format data into numpy\n",
    "group_a = np.array([1, 1, 1, 1, 0, 0, 0, 0, 0, 0])\n",
    "group_b = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n",
    "y_pred_cl = np.array([0, 1, 1, 2, 0, 0, 0, 0, 1, 2])\n",
    "y_true_cl = np.array([0, 1, 0, 2, 0, 0, 1, 0, 1, 2])\n",
    "cluster_balance(group_a, group_b, y_pred_cl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/giuliofilippi/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_clustering.py:65: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  r_tot_a = group_a.sum() / len(group_a)\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "boolean index did not match indexed array along dimension 0; dimension is 0 but corresponding boolean dimension is 10",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 33\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000035?line=3'>4</a>\u001b[0m y_pred_cl \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39marray([\u001b[39m0\u001b[39m, \u001b[39m1\u001b[39m, \u001b[39m1\u001b[39m, \u001b[39m2\u001b[39m, \u001b[39m0\u001b[39m, \u001b[39m0\u001b[39m, \u001b[39m0\u001b[39m, \u001b[39m0\u001b[39m, \u001b[39m1\u001b[39m, \u001b[39m2\u001b[39m])\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000035?line=4'>5</a>\u001b[0m y_true_cl \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39marray([\u001b[39m0\u001b[39m, \u001b[39m1\u001b[39m, \u001b[39m0\u001b[39m, \u001b[39m2\u001b[39m, \u001b[39m0\u001b[39m, \u001b[39m0\u001b[39m, \u001b[39m1\u001b[39m, \u001b[39m0\u001b[39m, \u001b[39m1\u001b[39m, \u001b[39m2\u001b[39m])\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000035?line=5'>6</a>\u001b[0m cluster_balance(group_a, group_b, y_pred_cl)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_clustering.py:76\u001b[0m, in \u001b[0;36mcluster_balance\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     74\u001b[0m members \u001b[39m=\u001b[39m y_pred \u001b[39m==\u001b[39m c\n\u001b[1;32m     75\u001b[0m n_members \u001b[39m=\u001b[39m members\u001b[39m.\u001b[39msum() \u001b[39m+\u001b[39m \u001b[39m1.e-20\u001b[39m\n\u001b[0;32m---> 76\u001b[0m n_a \u001b[39m=\u001b[39m group_a[members]\u001b[39m.\u001b[39msum() \u001b[39m+\u001b[39m \u001b[39m1.e-20\u001b[39m\n\u001b[1;32m     77\u001b[0m n_b \u001b[39m=\u001b[39m group_b[members]\u001b[39m.\u001b[39msum() \u001b[39m+\u001b[39m \u001b[39m1.e-20\u001b[39m\n\u001b[1;32m     79\u001b[0m \u001b[39m# group_a ratios\u001b[39;00m\n",
      "\u001b[0;31mIndexError\u001b[0m: boolean index did not match indexed array along dimension 0; dimension is 0 but corresponding boolean dimension is 10"
     ]
    }
   ],
   "source": [
    "# empty group\n",
    "group_a = np.array([])\n",
    "group_b = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n",
    "y_pred_cl = np.array([0, 1, 1, 2, 0, 0, 0, 0, 1, 2])\n",
    "y_true_cl = np.array([0, 1, 0, 2, 0, 0, 1, 0, 1, 2])\n",
    "cluster_balance(group_a, group_b, y_pred_cl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Format data into numpy\n",
    "group_a = np.array([1, 1, 1, 1, 0, 0, 0, 0, 0, 0])\n",
    "group_b = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n",
    "y_pred_cl = np.array([])\n",
    "y_true_cl = np.array([0, 1, 0, 2, 0, 0, 1, 0, 1, 2])\n",
    "cluster_balance(group_a, group_b, y_pred_cl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Format data into numpy\n",
    "group_a = np.array([1, 1, 1, 1, 0, 0, 0, 0, 0, 0])\n",
    "group_b = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n",
    "y_pred_cl = np.array([])\n",
    "y_true_cl = np.array([0, 1, 0, 2, 0, 0, 1, 0, 1, 2])\n",
    "cluster_balance(group_a, group_b, y_pred_cl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Recommender"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Multiclass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Helper functions for code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _check_numpy(arr, name=''):\n",
    "    if type(arr) is not np.ndarray:\n",
    "        raise Exception(name + \" is not a numpy object\")\n",
    "\n",
    "def _check_binary(arr, name=''):\n",
    "    if not np.array_equal(arr, arr.astype(bool)):\n",
    "        raise Exception(name + \" is not binary\")\n",
    "\n",
    "def _check_non_empty(arr, name=''):\n",
    "    num_a = arr.sum()\n",
    "    if num_a == 0:\n",
    "        raise Exception(name + \" has no members\" )\n",
    "\n",
    "def _check_same_lenght(list_of_arr, names=''):\n",
    "    n = len(np.unique([x.shape[0] for x in list_of_arr]))\n",
    "    if n > 1:\n",
    "        raise Exception(names + \" do not all have the same lenght\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# binary classification\n",
    "def check_classification_inputs(group_a, group_b, y_pred, y_true=None):\n",
    "    if y_true is None:\n",
    "        # check numpy\n",
    "        _check_numpy(group_a, name='group_a')\n",
    "        _check_numpy(group_b, name='group_b')\n",
    "        _check_numpy(y_pred, name='y_pred')\n",
    "        # check binary\n",
    "        _check_binary(group_a, name='group_a')\n",
    "        _check_binary(group_b, name='group_b')\n",
    "        _check_binary(y_pred, name='y_pred')\n",
    "        # check same lenght\n",
    "        _check_same_lenght([group_a, group_b, y_pred], names='group_a, group_b and y_pred')\n",
    "        # check non empty\n",
    "        _check_non_empty(group_a, name='group_a')\n",
    "        _check_non_empty(group_b, name='group_b')\n",
    "    else:\n",
    "        # check numpy\n",
    "        _check_numpy(group_a, name='group_a')\n",
    "        _check_numpy(group_b, name='group_b')\n",
    "        _check_numpy(y_pred, name='y_pred')\n",
    "        _check_numpy(y_pred, name='y_true')\n",
    "        # check binary\n",
    "        _check_binary(group_a, name='group_a')\n",
    "        _check_binary(group_b, name='group_b')\n",
    "        _check_binary(y_pred, name='y_pred')\n",
    "        _check_binary(y_true, name='y_true')\n",
    "        # check same lenght\n",
    "        _check_same_lenght([group_a, group_b, y_pred, y_true], names='group_a, group_b, y_pred and y_true')\n",
    "        # check non empty\n",
    "        _check_non_empty(group_a, name='group_a')\n",
    "        _check_non_empty(group_b, name='group_b')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# regression\n",
    "def check_regression_inputs(group_a, group_b, y_pred, y_true=None):\n",
    "    if y_true is None:\n",
    "        # check numpy\n",
    "        _check_numpy(group_a, name='group_a')\n",
    "        _check_numpy(group_b, name='group_b')\n",
    "        _check_numpy(y_pred, name='y_pred')\n",
    "        # check binary\n",
    "        _check_binary(group_a, name='group_a')\n",
    "        _check_binary(group_b, name='group_b')\n",
    "        # check same lenght\n",
    "        _check_same_lenght([group_a, group_b, y_pred], names='group_a, group_b and y_pred')\n",
    "        # check non empty\n",
    "        _check_non_empty(group_a, name='group_a')\n",
    "        _check_non_empty(group_b, name='group_b')\n",
    "    else:\n",
    "        # check numpy\n",
    "        _check_numpy(group_a, name='group_a')\n",
    "        _check_numpy(group_b, name='group_b')\n",
    "        _check_numpy(y_pred, name='y_pred')\n",
    "        _check_numpy(y_pred, name='y_true')\n",
    "        # check binary\n",
    "        _check_binary(group_a, name='group_a')\n",
    "        _check_binary(group_b, name='group_b')\n",
    "        # check same lenght\n",
    "        _check_same_lenght([group_a, group_b, y_pred, y_true], names='group_a, group_b, y_pred and y_true')\n",
    "        # check non empty\n",
    "        _check_non_empty(group_a, name='group_a')\n",
    "        _check_non_empty(group_b, name='group_b')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from holisticai.bias.metrics import cluster_balance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Format data into numpy\n",
    "group_a = np.array([1, 1, 1, 1, 0, 0, 0, 0, 0, 0])\n",
    "group_b = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n",
    "y_pred_cl = np.array(['a', 'b', 'c', 'c', 'a', 'a', 'a', 'a', 'b', 'c'])\n",
    "X = np.array(\n",
    "    [[-1, 1],\n",
    "     [1, 1],\n",
    "     [1, 1],\n",
    "     [0, -1],\n",
    "     [-1, 1],\n",
    "     [-1, 1],\n",
    "     [-1, 1],\n",
    "     [-1, 1],\n",
    "     [1, 1],\n",
    "     [0, -1]])\n",
    "centroids = np.array(\n",
    "    [[-2, 1],\n",
    "     [1, 2],\n",
    "     [0, -2]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_balance(group_a, group_b, y_pred_cl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/giuliofilippi/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_clustering.py:58: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  r_tot_a = group_a.sum() / len(group_a)\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "boolean index did not match indexed array along dimension 0; dimension is 0 but corresponding boolean dimension is 10",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 49\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000050?line=0'>1</a>\u001b[0m cluster_balance(np\u001b[39m.\u001b[39;49marray([]), group_b, y_pred_cl)\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_clustering.py:69\u001b[0m, in \u001b[0;36mcluster_balance\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     67\u001b[0m members \u001b[39m=\u001b[39m y_pred \u001b[39m==\u001b[39m c\n\u001b[1;32m     68\u001b[0m n_members \u001b[39m=\u001b[39m members\u001b[39m.\u001b[39msum() \u001b[39m+\u001b[39m \u001b[39m1.e-20\u001b[39m\n\u001b[0;32m---> 69\u001b[0m n_a \u001b[39m=\u001b[39m group_a[members]\u001b[39m.\u001b[39msum() \u001b[39m+\u001b[39m \u001b[39m1.e-20\u001b[39m\n\u001b[1;32m     70\u001b[0m n_b \u001b[39m=\u001b[39m group_b[members]\u001b[39m.\u001b[39msum() \u001b[39m+\u001b[39m \u001b[39m1.e-20\u001b[39m\n\u001b[1;32m     72\u001b[0m \u001b[39m# group_a ratios\u001b[39;00m\n",
      "\u001b[0;31mIndexError\u001b[0m: boolean index did not match indexed array along dimension 0; dimension is 0 but corresponding boolean dimension is 10"
     ]
    }
   ],
   "source": [
    "cluster_balance(np.array([]), group_b, y_pred_cl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "boolean index did not match indexed array along dimension 0; dimension is 10 but corresponding boolean dimension is 20",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 50\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000051?line=0'>1</a>\u001b[0m cluster_balance(group_a, group_b, np\u001b[39m.\u001b[39;49marray(\u001b[39mlist\u001b[39;49m(y_pred_cl)\u001b[39m*\u001b[39;49m\u001b[39m2\u001b[39;49m))\n",
      "File \u001b[0;32m~/Documents/GitHub/holisticai/examples/../holisticai/bias/metrics/_clustering.py:69\u001b[0m, in \u001b[0;36mcluster_balance\u001b[0;34m(group_a, group_b, y_pred)\u001b[0m\n\u001b[1;32m     67\u001b[0m members \u001b[39m=\u001b[39m y_pred \u001b[39m==\u001b[39m c\n\u001b[1;32m     68\u001b[0m n_members \u001b[39m=\u001b[39m members\u001b[39m.\u001b[39msum() \u001b[39m+\u001b[39m \u001b[39m1.e-20\u001b[39m\n\u001b[0;32m---> 69\u001b[0m n_a \u001b[39m=\u001b[39m group_a[members]\u001b[39m.\u001b[39msum() \u001b[39m+\u001b[39m \u001b[39m1.e-20\u001b[39m\n\u001b[1;32m     70\u001b[0m n_b \u001b[39m=\u001b[39m group_b[members]\u001b[39m.\u001b[39msum() \u001b[39m+\u001b[39m \u001b[39m1.e-20\u001b[39m\n\u001b[1;32m     72\u001b[0m \u001b[39m# group_a ratios\u001b[39;00m\n",
      "\u001b[0;31mIndexError\u001b[0m: boolean index did not match indexed array along dimension 0; dimension is 10 but corresponding boolean dimension is 20"
     ]
    }
   ],
   "source": [
    "cluster_balance(group_a, group_b, np.array(list(y_pred_cl)*2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(group_a, np.ndarray)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# okay ive done most cases, we can always make more complicated later if needed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _check_binary(arr):\n",
    "    \"\"\"\n",
    "    Check binary\n",
    "\n",
    "    Description\n",
    "    ----------\n",
    "    This function checks if a numpy array\n",
    "    is binary.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    arr : numpy array\n",
    "        input\n",
    "    name : str\n",
    "        the name of the input\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    ValueError or None\n",
    "    \"\"\"\n",
    "    if not np.array_equal(arr, arr.astype(bool)):\n",
    "        raise ValueError(\"{arr} is not binary\".format(arr=repr(arr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "array([2, 2, 2, 2, 0, 0, 0, 0, 0, 0]) is not binary",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 51\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000058?line=0'>1</a>\u001b[0m _check_binary(\u001b[39m2\u001b[39;49m\u001b[39m*\u001b[39;49mgroup_a)\n",
      "\u001b[1;32m/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb Cell 51\u001b[0m in \u001b[0;36m_check_binary\u001b[0;34m(arr)\u001b[0m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000058?line=1'>2</a>\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000058?line=2'>3</a>\u001b[0m \u001b[39mCheck binary\u001b[39;00m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000058?line=3'>4</a>\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000058?line=18'>19</a>\u001b[0m \u001b[39mValueError or None\u001b[39;00m\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000058?line=19'>20</a>\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000058?line=20'>21</a>\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m np\u001b[39m.\u001b[39marray_equal(arr, arr\u001b[39m.\u001b[39mastype(\u001b[39mbool\u001b[39m)):\n\u001b[0;32m---> <a href='vscode-notebook-cell:/Users/giuliofilippi/Documents/GitHub/holisticai/examples/bias_unit_testing.ipynb#ch0000058?line=21'>22</a>\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(\u001b[39m\"\u001b[39m\u001b[39m{arr}\u001b[39;00m\u001b[39m is not binary\u001b[39m\u001b[39m\"\u001b[39m\u001b[39m.\u001b[39mformat(arr\u001b[39m=\u001b[39m\u001b[39mrepr\u001b[39m(arr)))\n",
      "\u001b[0;31mValueError\u001b[0m: array([2, 2, 2, 2, 0, 0, 0, 0, 0, 0]) is not binary"
     ]
    }
   ],
   "source": [
    "_check_binary(2*group_a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean([0,0,0,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([1,2,3,4,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5,)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(a.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.13 ('torch-nightly')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "f5fa74478a026ac530ef194e4df855dfb9675779484e20284ae5f690a2266d7b"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
